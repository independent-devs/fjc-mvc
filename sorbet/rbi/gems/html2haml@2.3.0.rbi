# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `html2haml` gem.
# Please instead update this file by running `bin/tapioca gem html2haml`.


# @private
#
# source://html2haml//lib/html2haml/html.rb#99
HAML_TAGS = T.let(T.unsafe(nil), Array)

# end
#
# source://html2haml//lib/html2haml/version.rb#1
module Html2haml; end

# Converts HTML documents into Haml templates.
# Depends on [Nokogiri](http://nokogiri.org/) for HTML parsing.
# If ERB conversion is being used, also depends on
# [Erubis](http://www.kuwata-lab.com/erubis) to parse the ERB
# and [ruby_parser](http://parsetree.rubyforge.org/) to parse the Ruby code.
#
# Example usage:
#
#     HTML.new("<a href='http://google.com'>Blat</a>").render
#       #=> "%a{:href => 'http://google.com'} Blat"
#
# source://html2haml//lib/html2haml/html/erb.rb#6
class Html2haml::HTML
  # @option options
  # @option options
  # @param template [String, Nokogiri::Node] The HTML template to convert
  # @param options [Hash] a customizable set of options
  # @return [HTML] a new instance of HTML
  #
  # source://html2haml//lib/html2haml/html.rb#132
  def initialize(template, options = T.unsafe(nil)); end

  # source://html2haml//lib/html2haml/html.rb#153
  def detect_proper_parser(template); end

  # Processes the document and returns the result as a string
  # containing the Haml template.
  #
  # source://html2haml//lib/html2haml/html.rb#181
  def render; end

  # Processes the document and returns the result as a string
  # containing the Haml template.
  #
  # source://html2haml//lib/html2haml/html.rb#181
  def to_haml; end
end

# A class for converting ERB code into a format that's easier
# for the {Html2haml::HTML} Nokogiri-based parser to understand.
#
# Uses [Erubis](http://www.kuwata-lab.com/erubis)'s extensible parsing powers
# to parse the ERB in a reliable way,
# and [ruby_parser](http://parsetree.rubyforge.org/)'s Ruby knowledge
# to figure out whether a given chunk of Ruby code starts a block or not.
#
# The ERB tags are converted to HTML tags in the following way.
# `<% ... %>` is converted into `<haml_silent> ... </haml_silent>`.
# `<%= ... %>` is converted into `<haml_loud> ... </haml_loud>`.
# `<%== ... %>` is converted into `<haml_loud raw=raw> ... </haml_loud>`.
# Finally, if either of these opens a Ruby block,
# `<haml_block> ... </haml_block>` will wrap the entire contents of the block -
# that is, everything that should be indented beneath the previous silent or loud tag.
#
# source://html2haml//lib/html2haml/html/erb.rb#22
class Html2haml::HTML::ERB < ::Erubis::Basic::Engine
  # `html2haml` doesn't support debugging expressions.
  #
  # @raise [Haml::Error]
  #
  # source://html2haml//lib/html2haml/html/erb.rb#81
  def add_expr_debug(src, code); end

  # source://html2haml//lib/html2haml/html/erb.rb#76
  def add_expr_escaped(src, code); end

  # Concatenates a Ruby expression that's printed to the document
  # onto the source buffer.
  # This uses the `<haml:silent>` tag,
  # and may open a Ruby block with the `<haml:block>` tag.
  # An expression never closes a block.
  #
  # @param src [String] The source buffer
  # @param code [String] The Ruby expression to add to the buffer
  #
  # source://html2haml//lib/html2haml/html/erb.rb#71
  def add_expr_literal(src, code); end

  # The ERB-to-Hamlized-HTML conversion has no postamble.
  #
  # source://html2haml//lib/html2haml/html/erb.rb#36
  def add_postamble(src); end

  # The ERB-to-Hamlized-HTML conversion has no preamble.
  #
  # source://html2haml//lib/html2haml/html/erb.rb#33
  def add_preamble(src); end

  # Concatenates a silent Ruby statement onto the source buffer.
  # This uses the `<haml_silent>` tag,
  # and may close and/or open a Ruby block with the `<haml_block>` tag.
  #
  # In particular, a block is closed if this statement is some form of `end`,
  # opened if it's a block opener like `do`, `if`, or `begin`,
  # and both closed and opened if it's a mid-block keyword
  # like `else` or `when`.
  #
  # @param src [String] The source buffer
  # @param code [String] The Ruby statement to add to the buffer
  #
  # source://html2haml//lib/html2haml/html/erb.rb#57
  def add_stmt(src, code); end

  # Concatenates the text onto the source buffer.
  #
  # @param src [String] The source buffer
  # @param text [String] The raw text to add to the buffer
  #
  # source://html2haml//lib/html2haml/html/erb.rb#42
  def add_text(src, text); end

  private

  # Checks if a string of Ruby code closes a block.
  # This is always `end` followed optionally by some method calls.
  #
  # @param code [String] Ruby code to check
  # @return [Boolean]
  #
  # source://html2haml//lib/html2haml/html/erb.rb#135
  def block_closer?(code); end

  # Checks if a string of Ruby code opens a block.
  # This could either be something like `foo do |a|`
  # or a keyword that requires a matching `end`
  # like `if`, `begin`, or `case`.
  #
  # @param code [String] Ruby code to check
  # @return [Boolean]
  #
  # source://html2haml//lib/html2haml/html/erb.rb#124
  def block_opener?(code); end

  # HTML-escaped some text (in practice, always Ruby code).
  # A utility method.
  #
  # @param text [String] The text to escape
  # @return [String] The escaped text
  #
  # source://html2haml//lib/html2haml/html/erb.rb#92
  def h(text); end

  # Returns whether the code has any content
  # This is used to test whether lines have been removed by erubis, such as comments
  #
  # @param code [String] Ruby code to check
  # @return [Boolean]
  #
  # source://html2haml//lib/html2haml/html/erb.rb#111
  def has_code?(code); end

  # Checks if a string of Ruby code comes in the middle of a block.
  # This could be a keyword like `else`, `rescue`, or `when`,
  # or even `end` with a method call that takes a block.
  #
  # @param code [String] Ruby code to check
  # @return [Boolean]
  #
  # source://html2haml//lib/html2haml/html/erb.rb#146
  def mid_block?(code); end

  # Returns whether the code is valid Ruby code on its own.
  #
  # @param code [String] Ruby code to check
  # @return [Boolean]
  #
  # source://html2haml//lib/html2haml/html/erb.rb#100
  def valid_ruby?(code); end

  class << self
    # Compiles an ERB template into a HTML document containing `haml_*` tags.
    #
    # @param template [String] The ERB template
    # @return [String] The output document
    # @see Html2haml::HTML::ERB
    #
    # source://html2haml//lib/html2haml/html/erb.rb#28
    def compile(template); end
  end
end

# source://html2haml//lib/html2haml/html.rb#186
Html2haml::HTML::TEXT_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://html2haml//lib/html2haml/version.rb#2
Html2haml::VERSION = T.let(T.unsafe(nil), String)

# Haml monkeypatches various Nokogiri classes
# to add methods for conversion to Haml.
#
# @private
#
# source://html2haml//lib/html2haml/html.rb#8
module Nokogiri
  class << self
    # source://nokogiri/1.16.6/lib/nokogiri/html4.rb#10
    def HTML(input, url = T.unsafe(nil), encoding = T.unsafe(nil), options = T.unsafe(nil), &block); end

    # source://nokogiri/1.16.6/lib/nokogiri/html4.rb#10
    def HTML4(input, url = T.unsafe(nil), encoding = T.unsafe(nil), options = T.unsafe(nil), &block); end

    # source://nokogiri/1.16.6/lib/nokogiri/html5.rb#30
    def HTML5(input, url = T.unsafe(nil), encoding = T.unsafe(nil), **options, &block); end

    # source://nokogiri/1.16.6/lib/nokogiri.rb#91
    def Slop(*args, &block); end

    # source://nokogiri/1.16.6/lib/nokogiri/xml.rb#7
    def XML(thing, url = T.unsafe(nil), encoding = T.unsafe(nil), options = T.unsafe(nil), &block); end

    # source://nokogiri/1.16.6/lib/nokogiri/xslt.rb#13
    def XSLT(stylesheet, modules = T.unsafe(nil)); end

    # source://nokogiri/1.16.6/lib/nokogiri.rb#96
    def install_default_aliases; end

    # source://nokogiri/1.16.6/lib/nokogiri/version/info.rb#206
    def jruby?; end

    # source://nokogiri/1.16.6/lib/nokogiri/version/info.rb#211
    def libxml2_patches; end

    # source://nokogiri/1.16.6/lib/nokogiri.rb#68
    def make(input = T.unsafe(nil), opts = T.unsafe(nil), &blk); end

    # source://nokogiri/1.16.6/lib/nokogiri.rb#42
    def parse(string, url = T.unsafe(nil), encoding = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://nokogiri/1.16.6/lib/nokogiri/version/info.rb#201
    def uses_gumbo?; end

    # source://nokogiri/1.16.6/lib/nokogiri/version/info.rb#193
    def uses_libxml?(requirement = T.unsafe(nil)); end
  end
end

module Nokogiri::Test
  class << self
    def __foreign_error_handler; end
  end
end

# source://html2haml//lib/html2haml/html.rb#10
module Nokogiri::XML
  class << self
    # source://nokogiri/1.16.6/lib/nokogiri/xml.rb#23
    def Reader(string_or_io, url = T.unsafe(nil), encoding = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://nokogiri/1.16.6/lib/nokogiri/xml/relax_ng.rb#9
    def RelaxNG(string_or_io, options = T.unsafe(nil)); end

    # source://nokogiri/1.16.6/lib/nokogiri/xml/schema.rb#9
    def Schema(string_or_io, options = T.unsafe(nil)); end

    # source://nokogiri/1.16.6/lib/nokogiri/xml.rb#42
    def fragment(string, options = T.unsafe(nil), &block); end

    # source://nokogiri/1.16.6/lib/nokogiri/xml.rb#36
    def parse(thing, url = T.unsafe(nil), encoding = T.unsafe(nil), options = T.unsafe(nil), &block); end
  end
end

# @private
# @see Nokogiri
#
# source://html2haml//lib/html2haml/html.rb#223
class Nokogiri::XML::CDATA < ::Nokogiri::XML::Text
  # removes the start and stop markers for cdata
  #
  # source://html2haml//lib/html2haml/html.rb#232
  def content_without_cdata_tokens; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/cdata.rb#8
  def name; end

  # @see Html2haml::HTML::Node#to_haml
  #
  # source://html2haml//lib/html2haml/html.rb#225
  def to_haml(tabs, options); end

  class << self
    def new(*_arg0); end
  end
end

# @private
# @see Nokogiri
#
# source://html2haml//lib/html2haml/html.rb#271
class Nokogiri::XML::Comment < ::Nokogiri::XML::CharacterData
  # @see Html2haml::HTML::Node#to_haml
  #
  # source://html2haml//lib/html2haml/html.rb#273
  def to_haml(tabs, options); end

  class << self
    def new(*_arg0); end
  end
end

# @private
# @see Nokogiri
#
# source://html2haml//lib/html2haml/html.rb#241
class Nokogiri::XML::DTD < ::Nokogiri::XML::Node
  def attributes; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/dtd.rb#17
  def each; end

  def elements; end
  def entities; end
  def external_id; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/dtd.rb#27
  def html5_dtd?; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/dtd.rb#23
  def html_dtd?; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/dtd.rb#13
  def keys; end

  def notations; end
  def system_id; end

  # @raise [Haml::SyntaxError]
  # @see Html2haml::HTML::Node#to_haml
  #
  # source://html2haml//lib/html2haml/html.rb#243
  def to_haml(tabs, options); end

  def validate(_arg0); end
end

# @private
# @see Nokogiri
#
# source://html2haml//lib/html2haml/html.rb#191
class Nokogiri::XML::Document < ::Nokogiri::XML::Node
  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#177
  def initialize(*args); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#393
  def <<(node_or_tags); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#393
  def add_child(node_or_tags); end

  def canonicalize(*_arg0); end
  def clone(*_arg0); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#316
  def collect_namespaces; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#261
  def create_cdata(string, &block); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#266
  def create_comment(string, &block); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#231
  def create_element(name, *contents_or_attrs, &block); end

  def create_entity(*_arg0); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#256
  def create_text_node(string, &block); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#457
  def deconstruct_keys(keys); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#364
  def decorate(node); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#323
  def decorators(key); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#276
  def document; end

  def dup(*_arg0); end
  def encoding; end
  def encoding=(_arg0); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#128
  def errors; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#128
  def errors=(_arg0); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#385
  def fragment(tags = T.unsafe(nil)); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#271
  def name; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#175
  def namespace_inheritance; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#175
  def namespace_inheritance=(_arg0); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#378
  def namespaces; end

  def remove_namespaces!; end
  def root; end
  def root=(_arg0); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#353
  def slop!; end

  # @see Html2haml::HTML::Node#to_haml
  #
  # source://html2haml//lib/html2haml/html.rb#193
  def to_haml(tabs, options); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1286
  def to_xml(*args, &block); end

  def url; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#331
  def validate; end

  def version; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#413
  def xpath_doctype; end

  private

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#465
  def inspect_attributes; end

  class << self
    def new(*_arg0); end

    # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#48
    def parse(string_or_io, url = T.unsafe(nil), encoding = T.unsafe(nil), options = T.unsafe(nil)); end

    def read_io(_arg0, _arg1, _arg2, _arg3); end
    def read_memory(_arg0, _arg1, _arg2, _arg3); end

    private

    # source://nokogiri/1.16.6/lib/nokogiri/xml/document.rb#83
    def empty_doc?(string_or_io); end
  end
end

# source://html2haml//lib/html2haml/html.rb#198
class Nokogiri::XML::DocumentFragment < ::Nokogiri::XML::Node
  # source://nokogiri/1.16.6/lib/nokogiri/xml/document_fragment.rb#19
  def initialize(document, tags = T.unsafe(nil), ctx = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document_fragment.rb#102
  def css(*args); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document_fragment.rb#190
  def deconstruct; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document_fragment.rb#42
  def dup; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document_fragment.rb#136
  def errors; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document_fragment.rb#140
  def errors=(things); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document_fragment.rb#144
  def fragment(data); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document_fragment.rb#54
  def name; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document_fragment.rb#121
  def search(*rules); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document_fragment.rb#60
  def serialize; end

  # @see Html2haml::HTML::Node#to_haml
  #
  # source://html2haml//lib/html2haml/html.rb#200
  def to_haml(tabs, options); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document_fragment.rb#67
  def to_html(*args); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document_fragment.rb#60
  def to_s; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document_fragment.rb#79
  def to_xhtml(*args); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document_fragment.rb#91
  def to_xml(*args); end

  private

  # source://nokogiri/1.16.6/lib/nokogiri/xml/document_fragment.rb#197
  def namespace_declarations(ctx); end

  class << self
    def new(*_arg0); end

    # source://nokogiri/1.16.6/lib/nokogiri/xml/document_fragment.rb#9
    def parse(tags, options = T.unsafe(nil), &block); end
  end
end

# @private
# @see Nokogiri
#
# source://html2haml//lib/html2haml/html.rb#290
class Nokogiri::XML::Element < ::Nokogiri::XML::Node
  # @see Html2haml::HTML::Node#to_haml
  #
  # source://html2haml//lib/html2haml/html.rb#292
  def to_haml(tabs, options); end

  private

  # @return [Boolean]
  #
  # source://html2haml//lib/html2haml/html.rb#440
  def attribute_value_can_be_bare_ruby?(value); end

  # TODO: this method is utterly awful, find a better way to decode HTML entities.
  #
  # source://html2haml//lib/html2haml/html.rb#483
  def decode_entities(str); end

  # @return [Boolean]
  #
  # source://html2haml//lib/html2haml/html.rb#497
  def dynamic_attribute?(name, options); end

  # source://html2haml//lib/html2haml/html.rb#414
  def dynamic_attributes; end

  # Returns the string representation of a single attribute key value pair
  #
  # source://html2haml//lib/html2haml/html.rb#527
  def haml_attribute_pair(name, value, options); end

  # Returns a string representation of an attributes hash
  # that's prettier than that produced by Hash#inspect
  #
  # source://html2haml//lib/html2haml/html.rb#515
  def haml_attributes(options); end

  # @return [Boolean]
  #
  # source://html2haml//lib/html2haml/html.rb#509
  def haml_css_attr?(attr); end

  # source://html2haml//lib/html2haml/html.rb#408
  def render_children(so_far, tabs, options); end

  # @return [Boolean]
  #
  # source://html2haml//lib/html2haml/html.rb#493
  def static_attribute?(name, options); end

  # @return [Boolean]
  #
  # source://html2haml//lib/html2haml/html.rb#505
  def static_classname?(options); end

  # @return [Boolean]
  #
  # source://html2haml//lib/html2haml/html.rb#501
  def static_id?(options); end

  # source://html2haml//lib/html2haml/html.rb#456
  def to_haml_filter(filter, tabs, options); end
end

# @see Nokogiri
#
# source://html2haml//lib/html2haml/html.rb#12
class Nokogiri::XML::Node
  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#126
  def initialize(name, document); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#256
  def <<(node_or_tags); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1262
  def <=>(other); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1252
  def ==(other); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#512
  def [](name); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#550
  def []=(name, value); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1246
  def accept(visitor); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#148
  def add_child(node_or_tags); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#715
  def add_class(names); end

  def add_namespace(_arg0, _arg1); end
  def add_namespace_definition(_arg0, _arg1); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#288
  def add_next_sibling(node_or_tags); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#271
  def add_previous_sibling(node_or_tags); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#318
  def after(node_or_tags); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1215
  def ancestors(selector = T.unsafe(nil)); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#759
  def append_class(names); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#512
  def attr(name); end

  def attribute(_arg0); end
  def attribute_nodes; end
  def attribute_with_ns(_arg0, _arg1); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#609
  def attributes; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#304
  def before(node_or_tags); end

  def blank?; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1414
  def canonicalize(mode = T.unsafe(nil), inclusive_namespaces = T.unsafe(nil), with_comments = T.unsafe(nil)); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1136
  def cdata?; end

  def child; end
  def children; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#349
  def children=(node_or_tags); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#669
  def classes; end

  def clone(*_arg0); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1131
  def comment?; end

  def content; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#411
  def content=(string); end

  # Whether this node has already been converted to Haml.
  # Only used for text nodes and elements.
  #
  # @return [Boolean]
  #
  # source://html2haml//lib/html2haml/html.rb#17
  def converted_to_haml; end

  # Whether this node has already been converted to Haml.
  # Only used for text nodes and elements.
  #
  # @return [Boolean]
  #
  # source://html2haml//lib/html2haml/html.rb#17
  def converted_to_haml=(_arg0); end

  def create_external_subset(_arg0, _arg1, _arg2); end
  def create_internal_subset(_arg0, _arg1, _arg2); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1206
  def css_path; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1475
  def deconstruct_keys(keys); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#132
  def decorate!; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#427
  def default_namespace=(url); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#643
  def delete(name); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1173
  def description; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#454
  def do_xinclude(options = T.unsafe(nil)); end

  def document; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1151
  def document?; end

  def dup(*_arg0); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#635
  def each; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1187
  def elem?; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1187
  def element?; end

  def element_children; end
  def elements; end
  def encode_special_chars(_arg0); end
  def external_subset; end
  def first_element_child; end

  # source://nokogiri/1.16.6/lib/nokogiri/html5/node.rb#70
  def fragment(tags); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1166
  def fragment?; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#512
  def get_attribute(name); end

  def has_attribute?(_arg0); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1146
  def html?; end

  # source://nokogiri/1.16.6/lib/nokogiri/html5/node.rb#31
  def inner_html(options = T.unsafe(nil)); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#338
  def inner_html=(node_or_tags); end

  def inner_text; end
  def internal_subset; end
  def key?(_arg0); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#629
  def keys; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#892
  def kwattr_add(attribute_name, keywords); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#945
  def kwattr_append(attribute_name, keywords); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#988
  def kwattr_remove(attribute_name, keywords); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#838
  def kwattr_values(attribute_name); end

  def lang; end
  def lang=(_arg0); end
  def last_element_child; end
  def line; end
  def line=(_arg0); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1015
  def matches?(selector); end

  def name; end
  def name=(_arg0); end
  def namespace; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#437
  def namespace=(ns); end

  def namespace_definitions; end
  def namespace_scopes; end
  def namespaced_key?(_arg0, _arg1); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1122
  def namespaces; end

  def native_content=(_arg0); end
  def next; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#288
  def next=(node_or_tags); end

  def next_element; end
  def next_sibling; end
  def node_name; end
  def node_name=(_arg0); end
  def node_type; end
  def parent; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#417
  def parent=(parent_node); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1030
  def parse(string_or_io, options = T.unsafe(nil)); end

  def path; end
  def pointer_id; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#168
  def prepend_child(node_or_tags); end

  def previous; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#271
  def previous=(node_or_tags); end

  def previous_element; end
  def previous_sibling; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1156
  def processing_instruction?; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1181
  def read_only?; end

  def remove; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#643
  def remove_attribute(name); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#809
  def remove_class(names = T.unsafe(nil)); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#369
  def replace(node_or_tags); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1286
  def serialize(*args, &block); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#550
  def set_attribute(name, value); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#403
  def swap(node_or_tags); end

  def text; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1161
  def text?; end

  # Returns the Haml representation of the given node.
  #
  # @option options
  # @option options
  # @param tabs [Fixnum] The indentation level of the resulting Haml.
  #
  # source://html2haml//lib/html2haml/html.rb#23
  def to_haml(tabs, options); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1313
  def to_html(options = T.unsafe(nil)); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1196
  def to_s; end

  def to_str; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1334
  def to_xhtml(options = T.unsafe(nil)); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1323
  def to_xml(options = T.unsafe(nil)); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1239
  def traverse(&block); end

  def type; end
  def unlink; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#623
  def value?(value); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#617
  def values; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#223
  def wrap(node_or_tags); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1391
  def write_html_to(io, options = T.unsafe(nil)); end

  # source://nokogiri/1.16.6/lib/nokogiri/html5/node.rb#39
  def write_to(io, *options); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1399
  def write_xhtml_to(io, options = T.unsafe(nil)); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1409
  def write_xml_to(io, options = T.unsafe(nil)); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1141
  def xml?; end

  protected

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1489
  def coerce(data); end

  private

  def add_child_node(_arg0); end

  # source://nokogiri/1.16.6/lib/nokogiri/html5/node.rb#83
  def add_child_node_and_reparent_attrs(node); end

  def add_next_sibling_node(_arg0); end
  def add_previous_sibling_node(_arg0); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1523
  def add_sibling(next_or_previous, node_or_tags); end

  # source://html2haml//lib/html2haml/html.rb#59
  def attr_hash; end

  def compare(_arg0); end
  def dump_html; end

  # source://html2haml//lib/html2haml/html.rb#38
  def erb_to_interpolation(text, options); end

  def get(_arg0); end
  def html_standard_serialize(_arg0); end
  def in_context(_arg0, _arg1); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1562
  def inspect_attributes; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1511
  def keywordify(keywords); end

  def native_write_to(_arg0, _arg1, _arg2, _arg3); end

  # source://html2haml//lib/html2haml/html.rb#63
  def parse_text(text, tabs); end

  # source://html2haml//lib/html2haml/html.rb#67
  def parse_text_with_interpolation(text, tabs); end

  def prepend_newline?; end

  # source://html2haml//lib/html2haml/html.rb#77
  def process_inline_nodes(node); end

  def process_xincludes(_arg0); end
  def replace_node(_arg0); end
  def set(_arg0, _arg1); end
  def set_namespace(_arg0); end

  # source://html2haml//lib/html2haml/html.rb#51
  def tabulate(tabs); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1548
  def to_format(save_option, options); end

  # source://html2haml//lib/html2haml/html.rb#55
  def uninterp(text); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node.rb#1555
  def write_format_to(save_option, io, options); end

  class << self
    def new(*_arg0); end
  end
end

# source://html2haml//lib/html2haml/html.rb#205
class Nokogiri::XML::NodeSet
  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#20
  def initialize(document, list = T.unsafe(nil)); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#119
  def %(*args); end

  def &(_arg0); end
  def +(_arg0); end
  def -(_arg0); end
  def <<(_arg0); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#393
  def ==(other); end

  def [](*_arg0); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#139
  def add_class(name); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#69
  def after(datum); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#151
  def append_class(name); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#119
  def at(*args); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#203
  def attr(key, value = T.unsafe(nil), &block); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#203
  def attribute(key, value = T.unsafe(nil), &block); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#63
  def before(datum); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#406
  def children; end

  def clone; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#83
  def css(*args); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#440
  def deconstruct; end

  def delete(_arg0); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#15
  def document; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#15
  def document=(_arg0); end

  def dup; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#231
  def each; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#45
  def empty?; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#130
  def filter(expr); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#29
  def first(n = T.unsafe(nil)); end

  def include?(_arg0); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#51
  def index(node = T.unsafe(nil)); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#260
  def inner_html(*args); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#253
  def inner_text; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#427
  def inspect; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#39
  def last; end

  def length; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#374
  def pop; end

  def push(_arg0); end
  def remove; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#223
  def remove_attr(name); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#223
  def remove_attribute(name); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#163
  def remove_class(name = T.unsafe(nil)); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#417
  def reverse; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#203
  def set(key, value = T.unsafe(nil), &block); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#383
  def shift; end

  def size; end
  def slice(*_arg0); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#253
  def text; end

  def to_a; end
  def to_ary; end

  # @see Html2haml::HTML::Node#to_haml
  #
  # source://html2haml//lib/html2haml/html.rb#207
  def to_haml(tabs, options); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#341
  def to_html(*args); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#335
  def to_s; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#358
  def to_xhtml(*args); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#364
  def to_xml(*args); end

  def unlink; end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#328
  def wrap(node_or_tags); end

  # source://nokogiri/1.16.6/lib/nokogiri/xml/node_set.rb#99
  def xpath(*args); end

  def |(_arg0); end
end

# @private
# @see Nokogiri
#
# source://html2haml//lib/html2haml/html.rb#214
class Nokogiri::XML::ProcessingInstruction < ::Nokogiri::XML::Node
  # source://nokogiri/1.16.6/lib/nokogiri/xml/processing_instruction.rb#6
  def initialize(document, name, content); end

  # @see Html2haml::HTML::Node#to_haml
  #
  # source://html2haml//lib/html2haml/html.rb#216
  def to_haml(tabs, options); end

  class << self
    def new(*_arg0); end
  end
end
